# ======================================
# Studio Revenue Manager - Backend Configuration
# ======================================

# ======================================
# SERVER CONFIGURATION
# ======================================

# Environment: development | production | test
NODE_ENV=development

# Server port (default: 3000)
PORT=3000

# ======================================
# DATABASE CONFIGURATION
# ======================================

# Database host (localhost for local development, postgres for Docker)
DB_HOST=localhost

# Database port (default PostgreSQL port: 5432)
DB_PORT=5432

# Database name
DB_NAME=studio_revenue_manager

# Database user
DB_USER=postgres

# Database password (REQUIRED - set a strong password)
# Generate with: openssl rand -base64 32
DB_PASSWORD=your_secure_password_here

# Enable SSL for database connection (recommended for production)
# Set to 'true' for production, 'false' for local development
DB_SSL=false

# Alternative: Full database URL (overrides individual DB_ settings if provided)
# Format: postgresql://user:password@host:port/database?sslmode=require
# DATABASE_URL=postgresql://postgres:password@localhost:5432/studio_revenue_manager

# ======================================
# JWT AUTHENTICATION
# ======================================

# JWT Secret for access tokens (REQUIRED - MINIMUM 32 CHARACTERS)
# Generate with: node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
# WARNING: Never commit actual secrets to version control
JWT_SECRET=your_jwt_secret_minimum_32_characters_long_replace_this

# Access token expiration time (Examples: 15m, 1h, 7d)
JWT_EXPIRES_IN=1h

# JWT Secret for refresh tokens (REQUIRED - MINIMUM 32 CHARACTERS)
# Generate with: node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
# Should be different from JWT_SECRET
JWT_REFRESH_SECRET=your_refresh_secret_minimum_32_characters_long_replace_this

# Refresh token expiration time (Examples: 7d, 30d, 90d)
JWT_REFRESH_EXPIRES_IN=7d

# ======================================
# SECURITY CONFIGURATION
# ======================================

# Allowed origins for CORS (comma-separated list)
# Development: http://localhost:5173
# Production: https://yourdomain.com,https://www.yourdomain.com
ALLOWED_ORIGINS=http://localhost:5173

# IP addresses to whitelist from rate limiting (comma-separated)
# Examples: 127.0.0.1,::1,192.168.1.100
# Leave empty to apply rate limits to all IPs
RATE_LIMIT_WHITELIST=

# ======================================
# EMAIL CONFIGURATION (Optional)
# ======================================
# Required for sending notifications and alerts
# Gmail Example Configuration:

# SMTP server hostname
# Gmail: smtp.gmail.com
# Outlook: smtp-mail.outlook.com
# Yahoo: smtp.mail.yahoo.com
SMTP_HOST=smtp.gmail.com

# SMTP port
# Standard: 587 (TLS), 465 (SSL), 25 (unsecured)
SMTP_PORT=587

# Email account username (usually your email address)
SMTP_USER=your_email@gmail.com

# Email account password or app-specific password
# Gmail: Generate app password at https://myaccount.google.com/apppasswords
# Outlook: Use regular password or app password
SMTP_PASS=your_app_password_here

# From address for outgoing emails
# Should match SMTP_USER or be an authorized sender
SMTP_FROM=noreply@yourdomain.com

# ======================================
# GOOGLE OAUTH CONFIGURATION (Optional)
# ======================================
# Required for Google OAuth login
# Get credentials from: https://console.cloud.google.com/apis/credentials

# Google OAuth Client ID
GOOGLE_CLIENT_ID=your_google_client_id_here

# Google OAuth Client Secret
GOOGLE_CLIENT_SECRET=your_google_client_secret_here

# Google OAuth Redirect URI (must match exactly in Google Console)
# Development: http://localhost:3000/api/auth/google/callback
# Production: https://yourdomain.com/api/auth/google/callback
GOOGLE_REDIRECT_URI=http://localhost:3000/api/auth/google/callback

# ======================================
# GOOGLE CALENDAR API CONFIGURATION (Optional)
# ======================================
# Required for Google Calendar integration and event synchronization
# Setup: https://developers.google.com/calendar/api/quickstart/nodejs

# Google Calendar API Key (for simple API calls)
# Get from: https://console.cloud.google.com/apis/credentials
GOOGLE_CALENDAR_API_KEY=

# Service Account Email (for server-to-server authentication)
# Example: service-account@project-id.iam.gserviceaccount.com
GOOGLE_SERVICE_ACCOUNT_EMAIL=

# Service Account Private Key (JSON key file content)
# Download from Google Cloud Console > IAM & Admin > Service Accounts
# Format: -----BEGIN PRIVATE KEY-----\nkey_content\n-----END PRIVATE KEY-----\n
# Note: Escape newlines with \n in the .env file
GOOGLE_SERVICE_ACCOUNT_PRIVATE_KEY=

# Calendar ID to sync events from
# Default: primary (your main calendar)
# Custom calendar: calendar_id@group.calendar.google.com
GOOGLE_CALENDAR_ID=primary

# ======================================
# FILE UPLOAD CONFIGURATION (Optional)
# ======================================

# Maximum file size for uploads in bytes
# Examples: 5242880 (5MB), 10485760 (10MB), 52428800 (50MB)
MAX_FILE_SIZE=5242880

# Upload directory path (relative to project root)
# Default: ./uploads
UPLOAD_DIR=./uploads

# Allowed file types for CSV uploads (comma-separated MIME types)
# Default: text/csv,application/vnd.ms-excel
ALLOWED_CSV_TYPES=text/csv,application/vnd.ms-excel

# ======================================
# LOGGING CONFIGURATION (Optional)
# ======================================

# Log level: error | warn | info | debug
# Production: warn or error
# Development: debug or info
LOG_LEVEL=info

# Log directory path (relative to backend package)
# Default: ./logs
LOG_DIR=./logs

# Log file retention days
# Default: 30 (files older than 30 days will be deleted)
LOG_RETENTION_DAYS=30

# ======================================
# RATE LIMITING CONFIGURATION (Optional)
# ======================================

# General API rate limit (requests per window)
# Default: 100 requests per 15 minutes
RATE_LIMIT_MAX=100

# Rate limit window in milliseconds
# Default: 900000 (15 minutes)
RATE_LIMIT_WINDOW_MS=900000

# Auth endpoints rate limit (stricter for login/register)
# Default: 5 requests per 15 minutes
AUTH_RATE_LIMIT_MAX=5

# ======================================
# MONITORING & PERFORMANCE (Optional)
# ======================================

# Enable performance monitoring
# Default: true
ENABLE_PERFORMANCE_MONITORING=true

# Performance metrics collection interval (milliseconds)
# Default: 30000 (30 seconds)
PERFORMANCE_INTERVAL=30000

# Enable query logging for debugging
# Warning: May impact performance, use only in development
ENABLE_QUERY_LOGGING=false

# ======================================
# FEATURE FLAGS (Optional)
# ======================================

# Enable Google Calendar synchronization
ENABLE_CALENDAR_SYNC=true

# Enable CSV bank transaction upload
ENABLE_CSV_UPLOAD=true

# Enable email notifications
ENABLE_EMAIL_NOTIFICATIONS=true

# ======================================
# DEVELOPMENT ONLY (Optional)
# ======================================

# Seed database on startup (development only)
# WARNING: Never use in production
SEED_ON_STARTUP=false

# Enable detailed error messages in API responses
# Should be false in production for security
DETAILED_ERRORS=true

# Enable CORS for all origins (development only)
# WARNING: Never use in production
CORS_ALL_ORIGINS=false

# ======================================
# NOTES
# ======================================
#
# 1. SECURITY BEST PRACTICES:
#    - Never commit .env file to version control
#    - Use strong, unique passwords and secrets (minimum 32 characters)
#    - Rotate secrets regularly (every 90 days recommended)
#    - Use different secrets for development, staging, and production
#    - Enable SSL/TLS in production (DB_SSL=true)
#
# 2. REQUIRED VARIABLES:
#    - DB_PASSWORD
#    - JWT_SECRET
#    - JWT_REFRESH_SECRET
#    All other variables have defaults or are optional
#
# 3. GENERATING SECRETS:
#    Run: node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
#    Or: openssl rand -base64 32
#
# 4. GOOGLE SERVICES:
#    - Calendar sync requires GOOGLE_SERVICE_ACCOUNT_EMAIL and GOOGLE_SERVICE_ACCOUNT_PRIVATE_KEY
#    - OAuth requires GOOGLE_CLIENT_ID, GOOGLE_CLIENT_SECRET, and GOOGLE_REDIRECT_URI
#
# 5. EMAIL NOTIFICATIONS:
#    - Gmail requires "Allow less secure apps" or app-specific password
#    - 2FA users must use app-specific password
#    - Get Gmail app password: https://myaccount.google.com/apppasswords
#
# 6. PRODUCTION CHECKLIST:
#    □ Set NODE_ENV=production
#    □ Use strong, unique secrets
#    □ Enable DB_SSL=true
#    □ Set specific ALLOWED_ORIGINS (no wildcards)
#    □ Configure proper SMTP credentials
#    □ Set appropriate rate limits
#    □ Enable monitoring and logging
#    □ Disable DETAILED_ERRORS
#    □ Review and test all security settings
#
# ======================================
